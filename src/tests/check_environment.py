"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RabbitMQ.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python src/tests/check_environment.py
"""

import sys
import subprocess
from pathlib import Path


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    if version.major == 3 and version.minor >= 8:
        print(f"   ‚úÖ Python {version.major}.{version.minor}.{version.micro}")
        return True
    else:
        print(f"   ‚ùå Python {version.major}.{version.minor}.{version.micro} (—Ç—Ä–µ–±—É–µ—Ç—Å—è >= 3.8)")
        return False


def check_package(package_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞."""
    try:
        __import__(package_name.replace("-", "_"))
        return True
    except ImportError:
        return False


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        "pytest",
        "pytest_asyncio",
        "aio_pika",
        "fastapi",
        "jsonrpcserver",
        "pydantic",
        "aiofiles"
    ]
    
    all_ok = True
    for package in required_packages:
        if check_package(package):
            print(f"   ‚úÖ {package}")
        else:
            print(f"   ‚ùå {package} (–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
            all_ok = False
    
    return all_ok


def check_rabbitmq():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RabbitMQ."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ RabbitMQ...")
    
    try:
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)
        result = sock.connect_ex(('localhost', 5672))
        sock.close()
        
        if result == 0:
            print("   ‚úÖ RabbitMQ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:5672")
            return True
        else:
            print("   ‚ùå RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:5672")
            print("      –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RabbitMQ: {e}")
        return False


def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_paths = [
        "src/services/base_service.py",
        "src/services/test_service.py",
        "src/transport/rabbitmq/producer.py",
        "src/transport/rabbitmq/consumer.py",
        "src/transport/json_rpc/dispatcher.py",
        "src/config/rabbitmq_config.py",
        "src/tests/conftest.py",
        "src/tests/test_rabbitmq_integration.py",
        "src/tests/test_rpc_service.py",
        "src/tests/test_rabbitmq_connection.py"
    ]
    
    all_ok = True
    root = Path(__file__).parent.parent.parent
    
    for path_str in required_paths:
        path = root / path_str
        if path.exists():
            print(f"   ‚úÖ {path_str}")
        else:
            print(f"   ‚ùå {path_str} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
            all_ok = False
    
    return all_ok


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    root = Path(__file__).parent.parent.parent
    env_file = root / ".env"
    
    if env_file.exists():
        print(f"   ‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
        return True
    else:
        print(f"   ‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ


def check_log_directory():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤...")
    
    root = Path(__file__).parent.parent.parent
    log_dir = root / "var" / "log"
    
    if log_dir.exists():
        print(f"   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {log_dir}")
    else:
        print(f"   ‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {log_dir}")
        print(f"      –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è...")
        try:
            log_dir.mkdir(parents=True, exist_ok=True)
            print(f"   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
            return False
    
    return True


def print_summary(checks):
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏."""
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
    print("=" * 60)
    
    all_passed = all(checks.values())
    
    for check_name, result in checks.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û"
        print(f"{status}: {check_name}")
    
    print("=" * 60)
    
    if all_passed:
        print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã:")
        print("  pytest src/tests/ -v")
    else:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        if not checks["–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"]:
            print("  1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        if not checks["RabbitMQ"]:
            print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ RabbitMQ: docker run -d --name rabbitmq -p 5672:5672 rabbitmq:3")
        if not checks["–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"]:
            print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
    
    print()
    return all_passed


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("=" * 60)
    print("üß™ –ü–†–û–í–ï–†–ö–ê –¢–ï–°–¢–û–í–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 60)
    
    checks = {
        "Python –≤–µ—Ä—Å–∏—è": check_python_version(),
        "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏": check_dependencies(),
        "RabbitMQ": check_rabbitmq(),
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞": check_project_structure(),
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": check_env_file(),
        "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤": check_log_directory()
    }
    
    return print_summary(checks)


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
