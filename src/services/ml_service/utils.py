import cv2
import os
from moviepy import VideoFileClip
import logging 
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
import os
from PIL import Image

def tr_frames(frames_dir, res_dir):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ frames_dir, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º,
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ res_dir.

    :param frames_dir: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∫–∞–¥—Ä–∞–º–∏
    :param res_dir: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã
    """
    if not os.path.exists(res_dir):
        os.makedirs(res_dir)

    for filename in os.listdir(frames_dir):
        file_path = os.path.join(frames_dir, filename)
        if os.path.isfile(file_path):
            try:
                with Image.open(file_path) as img:
                    width, height = img.size
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
                    img_copy = img.copy()

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                    draw = Image.new('RGB', (width // 2, height), (0, 0, 0))
                    img_copy.paste(draw, (0, 0))

                    save_path = os.path.join(res_dir, filename)
                    img_copy.save(save_path)
            except Exception as e:
                return {'status': False, 'error': e}
            
    return {'status': True}


def split_video_to_frames(path: str, temp_dir: str):
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(temp_dir, exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
    cap = cv2.VideoCapture(path)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ
    if not cap.isOpened():
        raise IOError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {path}")
    
    frame_count = 0
    
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        
        # –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: frame_000001.jpg
        frame_filename = os.path.join(temp_dir, f"frame_{frame_count:06d}.jpg")
        cv2.imwrite(frame_filename, frame)
        frame_count += 1
    
    cap.release()
    return {'procced_frames': frame_count}    


def extract_audio_from_video(video_path, output_audio_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ.

    :param video_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
    :param output_audio_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
    """
    try:
        with VideoFileClip(video_path) as video:
            audio = video.audio
            audio.write_audiofile(output_audio_path)   
        return {'status': True}
    except Exception as e:
        return {'status': False, 'error': e}
        

import os
import logging
from typing import List
import cv2
from moviepy import VideoFileClip, AudioFileClip, ImageSequenceClip


def safe_makedirs(path: str) -> None:
    os.makedirs(path, exist_ok=True)


def video_to_frames(video_path: str, output_folder: str) -> None:
    safe_makedirs(output_folder)
    cap = cv2.VideoCapture(video_path, cv2.CAP_FFMPEG)
    if not cap.isOpened():
        cap = cv2.VideoCapture(video_path)
    frame_count = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        cv2.imwrite(os.path.join(output_folder, f"frame_{frame_count:08d}.jpg"),
                    frame, [int(cv2.IMWRITE_JPEG_QUALITY), 95])
        frame_count += 1
    cap.release()
    logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤ ‚Üí {output_folder}")
    

def extract_audio_from_video(video_path: str, output_audio_path: str) -> None:
    clip = VideoFileClip(video_path)
    if clip.audio is None:
        return {'status': False, 'error': ValueError("–í –≤–∏–¥–µ–æ –Ω–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏")}
    clip.audio.write_audiofile(output_audio_path)
    clip.close()
    logging.info(f"–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_audio_path}")
    return {'status': True}


def list_images_sorted(dir_path: str) -> List[str]:
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    return sorted(
        [os.path.join(dir_path, f) for f in os.listdir(dir_path)
         if f.lower().endswith((".jpg", ".jpeg", ".png"))],
        key=lambda p: os.path.basename(p)
    )


def images_to_video_with_audio_auto_fps(
    images_dir: str,
    audio_path: str,
    output_path: str,
    source_video_path: str,
    temp_dir: str = 'var/temp'
) -> dict:
    """
    –°–æ–∑–¥–∞—ë—Ç –≤–∏–¥–µ–æ –∏–∑ –∫–∞–¥—Ä–æ–≤ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –ø–æ –¥–ª–∏–Ω–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ.
    –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è ‚Äî –∞—É–¥–∏–æ —É—Å–∫–æ—Ä—è–µ—Ç—Å—è –∏–ª–∏ –∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è.
    """

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è FPS –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    source_clip = VideoFileClip(source_video_path)
    fps = source_clip.fps
    target_duration = source_clip.duration
    logging.info(f"FPS –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {fps}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {target_duration:.2f} —Å–µ–∫")

    # –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images = list_images_sorted(images_dir)
    if not images:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∫–∏ –≤–∏–¥–µ–æ")

    # –°–æ–∑–¥–∞—ë–º –≤–∏–¥–µ–æ–∫–ª–∏–ø –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    clip = ImageSequenceClip(images, fps=fps)

    # –ü–æ–¥–≥–æ–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ—Ä—è–¥–∞ –ø–æ–¥ –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
    if abs(clip.duration - target_duration) > 0.05:
        clip = clip.with_duration(target_duration)
        logging.info(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–¥—Ä–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ–¥–æ–≥–Ω–∞–Ω–∞ –ø–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª ({target_duration:.2f} —Å–µ–∫)")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    if audio_path and os.path.exists(audio_path):
        wav_path = f"{temp_dir}/final_audio.wav"
        mp3_path = f'{temp_dir}/final_audio.mp3'
        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        change_audio_speed(audio_path, wav_path, desired_duration_sec=target_duration)
        audio = AudioSegment.from_wav(wav_path)
        audio.export(mp3_path, format="mp3")
        audio_clip = AudioFileClip(mp3_path)
        original_audio_duration = audio_clip.duration
        clip = clip.with_audio(audio_clip)

    # –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    clip.write_videofile(output_path, codec="libx264", audio_codec="aac", fps=fps)
    logging.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")

    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    clip.close()
    source_clip.close()

    return {'status': True}

import wave
import contextlib
from audiostretchy.stretch import stretch_audio
from pydub import AudioSegment

def change_audio_speed(input_path: str, output_path: str, desired_duration_sec: float, temp_dir: str = 'var/temp') -> None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å WAV-–∞—É–¥–∏–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞
    –∏ –æ–±—Ä–µ–∑–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        input_path (str): –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É WAV-—Ñ–∞–π–ª—É.
        output_path (str): –ø—É—Ç—å, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ –∞—É–¥–∏–æ.
        desired_duration_sec (float): —Ü–µ–ª–µ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    """
    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ---
    with contextlib.closing(wave.open(input_path, 'r')) as f:
        frames = f.getnframes()
        rate = f.getframerate()
        original_duration = frames / float(rate)

    # --- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ ---
    ratio = desired_duration_sec / original_duration

    # --- –ü—Ä–∏–º–µ–Ω—è–µ–º time-stretch ---
    temp_output = f"{temp_dir}/temp_stretched.wav"
    stretch_audio(input_path, temp_output, ratio=ratio)

    # --- –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã ---
    audio = AudioSegment.from_wav(temp_output)
    target_ms = int(desired_duration_sec * 1000)
    trimmed_audio = audio[:target_ms]  # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
    trimmed_audio.export(output_path, format="wav")

    print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {original_duration:.2f} —Å–µ–∫")
    print(f"üéØ –¶–µ–ª–µ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {desired_duration_sec:.2f} —Å–µ–∫")
    print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
    print(f"‚öôÔ∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (ratio): {ratio:.3f} "
          f"({'–∑–∞–º–µ–¥–ª–µ–Ω–∏–µ' if ratio > 1 else '—É—Å–∫–æ—Ä–µ–Ω–∏–µ'})")
    print(f"‚úÇÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {desired_duration_sec:.2f} —Å–µ–∫—É–Ω–¥")


